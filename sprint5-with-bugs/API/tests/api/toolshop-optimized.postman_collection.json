{
	"info": {
		"_postman_id": "a4740aaf-0f68-4a2a-a1fa-fd223f413629",
		"name": "toolshop-api-testing-optimized",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "38289559"
	},
	"item": [
		{
			"name": "/users/login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Clear any existing access token before login",
							"pm.environment.unset('accessToken');",
							"console.log('Cleared previous access token');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body as JSON",
							"const response = pm.response.json();",
							"const testCaseName = pm.iterationData.get('test_case') || 'Login Test';",
							"",
							"console.log(`Running test case: ${testCaseName}`);",
							"",
							"// Check if login was successful and save access token",
							"if (pm.response.code === 200 && response && response.access_token) {",
							"    pm.environment.set('accessToken', response.access_token);",
							"    console.log('‚úÖ Access Token saved: ' + response.access_token.substring(0, 20) + '...');",
							"    ",
							"    pm.test(`[${testCaseName}] Login successful`, function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"    ",
							"    pm.test(`[${testCaseName}] Access token received`, function () {",
							"        pm.expect(response.access_token).to.be.a('string').and.not.empty;",
							"    });",
							"} else {",
							"    console.log('‚ùå Login failed or no access token received');",
							"    pm.environment.unset('accessToken');",
							"    ",
							"    pm.test(`[${testCaseName}] Login failed as expected`, function () {",
							"        pm.response.to.not.have.status(200);",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/users/login"
			},
			"response": []
		},
		{
			"name": "/products",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Clear previous product data before creating new product",
							"pm.environment.unset('productId');",
							"pm.environment.unset('originalData');",
							"console.log('Cleared previous product data');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body as JSON",
							"const responseBody = pm.response.json();",
							"const responseStatusCode = pm.response.code;",
							"const testCaseName = pm.iterationData.get('test_case');",
							"",
							"// Display the test case name in the console",
							"console.log(`Running test case: ${testCaseName}`);",
							"",
							"// Check if the response status code matches the expected value from the CSV",
							"const expectedStatusCode = pm.iterationData.get('post_exp_status_code');",
							"pm.test(`[${testCaseName}] Status code is ${expectedStatusCode}`, function () {",
							"    pm.response.to.have.status(parseInt(expectedStatusCode));",
							"});",
							"",
							"// Handle different response scenarios and set dynamic variables",
							"if (responseStatusCode === 201 && responseBody && responseBody.id) {",
							"    // ‚úÖ Product created successfully",
							"    pm.environment.set('productId', responseBody.id);",
							"    console.log(`‚úÖ New product created with ID: ${responseBody.id}`);",
							"",
							"    // Save original data from the CSV for later comparison",
							"    const originalData = {",
							"        id: responseBody.id,",
							"        name: pm.iterationData.get('name'),",
							"        description: pm.iterationData.get('description'),",
							"        price: parseFloat(pm.iterationData.get('price')),",
							"        category_id: parseInt(pm.iterationData.get('category_id')),",
							"        brand_id: parseInt(pm.iterationData.get('brand_id')),",
							"        product_image_id: parseInt(pm.iterationData.get('product_image_id')),",
							"        is_location_offer: parseInt(pm.iterationData.get('is_location_offer')),",
							"        is_rental: parseInt(pm.iterationData.get('is_rental'))",
							"    };",
							"    pm.environment.set('originalData', JSON.stringify(originalData));",
							"    console.log(`‚úÖ Original data saved for comparison`);",
							"",
							"} else if (responseStatusCode === 422) {",
							"    // ‚ùå Validation error - use default product ID for testing",
							"    pm.environment.set('productId', 1);",
							"    console.log(`‚ö†Ô∏è Validation error - using default product ID (1) for subsequent tests`);",
							"",
							"} else if (responseStatusCode === 400) {",
							"    // ‚ùå Bad request - use default product ID",
							"    pm.environment.set('productId', 1);",
							"    console.log(`‚ö†Ô∏è Bad request - using default product ID (1) for subsequent tests`);",
							"",
							"} else {",
							"    // ‚ùå Other error scenarios",
							"    pm.environment.unset('productId');",
							"    pm.environment.unset('originalData');",
							"    console.log(`‚ùå Product creation failed - no data saved`);",
							"}",
							"",
							"// Additional validation for successful creation",
							"if (responseStatusCode === 201) {",
							"    pm.test(`[${testCaseName}] Product has valid ID`, function () {",
							"        pm.expect(responseBody.id).to.be.a('number').and.above(0);",
							"    });",
							"    ",
							"    pm.test(`[${testCaseName}] Product name matches input`, function () {",
							"        pm.expect(responseBody.name).to.eql(pm.iterationData.get('name'));",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accessToken}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{name}}\",\n  \"description\": \"{{description}}\",\n  \"price\": {{price}},\n  \"category_id\": {{category_id}},\n  \"brand_id\": {{brand_id}},\n  \"product_image_id\": {{product_image_id}},\n  \"is_location_offer\": {{is_location_offer}},\n  \"is_rental\": {{is_rental}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/products"
			},
			"response": []
		},
		{
			"name": "/products/{{productId}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Clear any previous update data",
							"pm.environment.unset('updatedData');",
							"",
							"// Verify we have a product ID to update",
							"const productId = pm.environment.get('productId');",
							"if (!productId) {",
							"    console.log('‚ö†Ô∏è No product ID available for PUT request');",
							"    pm.environment.set('productId', 1); // Use default",
							"} else {",
							"    console.log(`üîÑ Updating product with ID: ${productId}`);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseBody = pm.response.json();",
							"const testCaseName = pm.iterationData.get('test_case');",
							"const expectedStatusCode = pm.iterationData.get('put_exp_status_code');",
							"",
							"console.log(`Running test case: ${testCaseName}`);",
							"",
							"pm.test(`[${testCaseName}] Status code is ${expectedStatusCode}`, function () {",
							"    pm.response.to.have.status(parseInt(expectedStatusCode));",
							"});",
							"",
							"// Save the updated data if PUT was successful",
							"if (pm.response.code === 200) {",
							"    const updatedData = {",
							"        id: parseInt(pm.environment.get('productId')),",
							"        name: pm.iterationData.get('updated_name'),",
							"        description: pm.iterationData.get('updated_description'),",
							"        price: parseFloat(pm.iterationData.get('updated_price')),",
							"        category_id: parseInt(pm.iterationData.get('category_id')),",
							"        brand_id: parseInt(pm.iterationData.get('brand_id')),",
							"        product_image_id: parseInt(pm.iterationData.get('product_image_id')),",
							"        is_location_offer: parseInt(pm.iterationData.get('is_location_offer')),",
							"        is_rental: parseInt(pm.iterationData.get('is_rental'))",
							"    };",
							"    pm.environment.set('updatedData', JSON.stringify(updatedData));",
							"    console.log(`‚úÖ Updated data saved for GET verification`);",
							"    ",
							"    pm.test(`[${testCaseName}] Update response has valid structure`, function () {",
							"        pm.expect(responseBody).to.have.property('id');",
							"        pm.expect(responseBody.id).to.eql(parseInt(pm.environment.get('productId')));",
							"    });",
							"} else {",
							"    pm.environment.unset('updatedData');",
							"    console.log(`‚ùå PUT request failed - no updated data to save`);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accessToken}}"
					}
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{updated_name}}\",\n  \"description\": \"{{updated_description}}\",\n  \"price\": {{updated_price}},\n  \"category_id\": {{category_id}},\n  \"brand_id\": {{brand_id}},\n  \"product_image_id\": {{product_image_id}},\n  \"is_location_offer\": {{is_location_offer}},\n  \"is_rental\": {{is_rental}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/products/{{productId}}"
			},
			"response": []
		},
		{
			"name": "/products/{{productId}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseBody = pm.response.json();",
							"const testCaseName = pm.iterationData.get('test_case');",
							"const expectedStatusCode = pm.iterationData.get('get_exp_status_code');",
							"",
							"pm.test(`[${testCaseName}] Status code is ${expectedStatusCode}`, function () {",
							"    pm.response.to.have.status(parseInt(expectedStatusCode));",
							"});",
							"",
							"// Only proceed with data comparison if the GET request was successful",
							"if (pm.response.code === 200) {",
							"    const updatedDataStr = pm.environment.get('updatedData');",
							"    ",
							"    if (updatedDataStr) {",
							"        const updatedData = JSON.parse(updatedDataStr);",
							"        console.log(`üîç Verifying updated data against GET response`);",
							"        ",
							"        // Compare each property to verify the update was successful",
							"        pm.test(`[${testCaseName}] Name was updated correctly`, function () {",
							"            pm.expect(responseBody.name).to.eql(updatedData.name);",
							"        });",
							"        pm.test(`[${testCaseName}] Description was updated correctly`, function () {",
							"            pm.expect(responseBody.description).to.eql(updatedData.description);",
							"        });",
							"        pm.test(`[${testCaseName}] Price was updated correctly`, function () {",
							"            pm.expect(responseBody.price).to.eql(updatedData.price);",
							"        });",
							"        ",
							"        console.log(`‚úÖ Data verification completed successfully`);",
							"    } else {",
							"        console.log(`‚ö†Ô∏è No updated data available for comparison`);",
							"    }",
							"} else {",
							"    console.log(`‚ùå GET request failed, skipping data comparison`);",
							"}",
							"",
							"// Clean up environment variables after verification",
							"pm.environment.unset('originalData');",
							"pm.environment.unset('updatedData');",
							"console.log(`üßπ Cleaned up temporary environment variables`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/products/{{productId}}"
			},
			"response": []
		},
		{
			"name": "/products/{{productId}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Verify we have the required access token for deletion",
							"const accessToken = pm.environment.get('accessToken');",
							"const productId = pm.environment.get('productId');",
							"",
							"if (!accessToken) {",
							"    console.log('‚ö†Ô∏è No access token available for DELETE request');",
							"} else {",
							"    console.log(`üóëÔ∏è Deleting product ${productId} with valid token`);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the expected status code from the CSV data",
							"const expectedStatusCode = pm.iterationData.get('del_exp_status_code');",
							"const testCaseName = pm.iterationData.get('test_case');",
							"",
							"// Log the test case being executed",
							"console.log(`Running test case: ${testCaseName}`);",
							"",
							"// Check if the response status code matches the expected value from the CSV",
							"if (expectedStatusCode === 'Invalid or missing token') {",
							"    // For the case where no token is provided, we expect a 401 Unauthorized status",
							"    pm.test(`[${testCaseName}] Status code is 401 Unauthorized`, function () {",
							"        pm.response.to.have.status(401);",
							"    });",
							"    console.log(`‚úÖ Unauthorized access correctly blocked`);",
							"} else {",
							"    // For other cases, check against the specified status code",
							"    pm.test(`[${testCaseName}] Status code is ${expectedStatusCode}`, function () {",
							"        pm.response.to.have.status(parseInt(expectedStatusCode));",
							"    });",
							"    ",
							"    if (pm.response.code === 204) {",
							"        console.log(`‚úÖ Product successfully deleted`);",
							"        // Clear the product ID since it's been deleted",
							"        pm.environment.unset('productId');",
							"    } else {",
							"        console.log(`‚ö†Ô∏è Product deletion failed with status ${pm.response.code}`);",
							"    }",
							"}",
							"",
							"// Clean up environment after deletion test",
							"pm.environment.unset('originalData');",
							"pm.environment.unset('updatedData');",
							"console.log(`üßπ Environment cleaned up after deletion test`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accessToken}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": "{{baseUrl}}/products/{{productId}}"
			},
			"response": []
		}
	]
} 