name: Run Playwright Tests 🎭

on:
  push:
    branches: [ main ]

concurrency: production_environment

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout ⚙️
        uses: actions/checkout@v4
      - name: Setup environment 🛠️
        run: |
          export DISABLE_LOGGING=true
          # Create .env file from template
          cp sprint5-with-bugs/API/.env_template sprint5-with-bugs/API/.env
          # Update database configuration for Docker
          sed -i 's/DB_HOST=127.0.0.1/DB_HOST=mariadb/g' sprint5-with-bugs/API/.env
          sed -i 's/DB_DATABASE=${SECRET_DB}_with_bugs/DB_DATABASE=toolshop/g' sprint5-with-bugs/API/.env
          sed -i 's/DB_USERNAME=${SECRET_DB_USER}/DB_USERNAME=user/g' sprint5-with-bugs/API/.env
          sed -i 's/DB_PASSWORD=${SECRET_DB_PASS}/DB_PASSWORD=root/g' sprint5-with-bugs/API/.env
          sed -i 's/APP_ENV=production/APP_ENV=local/g' sprint5-with-bugs/API/.env
          sed -i 's/APP_DEBUG=false/APP_DEBUG=true/g' sprint5-with-bugs/API/.env
          sed -i 's|APP_URL=https://with-bugs.practicesoftwaretesting.com/#/|APP_URL=http://localhost:8091|g' sprint5-with-bugs/API/.env
          echo "DISABLE_LOGGING=true" >> sprint5-with-bugs/API/.env
          echo "DISABLE_LOGGING=true" >> $GITHUB_ENV
      - name: Start containers 🐳
        run: |
          export DISABLE_LOGGING=true
          docker compose -f docker-compose.yml -f docker-compose.override.yml up -d --force-recreate
      - name: Wait for containers to be ready ⏳
        run: sleep 60
      - name: Create & Seed database 🌱
        run: |
          docker compose exec -T laravel-api php artisan migrate:refresh --seed
      - name: Test database connection 🔗
        run: |
          docker compose exec -T laravel-api php artisan tinker --execute="echo 'Database connection: ' . (DB::connection()->getPdo() ? 'OK' : 'FAILED');"
      - name: GET Version
        run: curl -v -X GET 'http://localhost:8091/status'
      - name: POST login
        run: |
          curl -v -X POST 'http://localhost:8091/users/login' \
          -H 'Content-Type: application/json' \
          --data-raw '{"email":"customer@practicesoftwaretesting.com","password":"welcome01"}'
      - name: Install node ⚙️
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies ⚙️
        run: |
          npm ci
          PLAYWRIGHT_VERSION=$(npm ls --json @playwright/test | jq --raw-output '.dependencies["@playwright/test"].version')
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV
      # Cache browser binaries, cache key is based on Playwright version and OS
      - name: 🧰 Cache Playwright browser binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: "~/.cache/ms-playwright"
          key: "${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}"
          restore-keys: |
            ${{ runner.os }}-playwright-

      # Install browser binaries & OS dependencies if cache missed
      - name: 🏗 Install Playwright browser binaries & OS dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          npx playwright install --with-deps

      # Install only the OS dependencies if cache hit
      - name: 🏗 Install Playwright OS dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: |
          npx playwright install-deps
      - name: Run Playwright tests 🧪
        run: npx playwright test
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report 📊
          path: playwright-report/
          retention-days: 10
